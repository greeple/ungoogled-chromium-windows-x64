diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index 03bec8f..cd70e32 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -108,6 +108,8 @@
 #include "chrome/browser/net/chrome_network_delegate.h"
 #include "chrome/browser/net/profile_network_context_service.h"
 #include "chrome/browser/net/profile_network_context_service_factory.h"
+#include "chrome/browser/net/per_site_overrides_throttle.h"
+#include "chrome/browser/per_site_overrides/per_site_overrides_service_factory.h"
 #include "chrome/browser/net/system_network_context_manager.h"
 #include "chrome/browser/optimization_guide/chrome_browser_main_extra_parts_optimization_guide.h"
 #include "chrome/browser/payments/payment_request_display_manager_factory.h"
@@ -5874,7 +5876,11 @@ ChromeContentBrowserClient::CreateURLLoaderThrottles(
   if (signin_throttle) {
     result.push_back(std::move(signin_throttle));
   }
-
+  // Per-site UA/font overrides throttle (profile-scoped).
+  if (profile) {
+    auto* svc = PerSiteOverridesServiceFactory::GetForProfile(profile);
+    result.push_back(std::make_unique<PerSiteOverridesThrottle>(svc));
+  }
   return result;
 }
 
diff --git a/chrome/browser/net/per_site_overrides_throttle.h b/chrome/browser/net/per_site_overrides_throttle.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/net/per_site_overrides_throttle.h
@@ -0,0 +1,88 @@
+#pragma once
+
+#include <string>
+#include <vector>
+
+#include "base/memory/raw_ptr.h"
+#include "content/public/browser/url_loader_throttle.h"
+#include "net/http/http_request_headers.h"
+#include "services/network/public/mojom/request_destination.mojom.h"
+#include "url/origin.h"
+
+class GURL;
+class PerSiteOverridesService;
+
+// A URLLoaderThrottle that applies per-top-frame-site overrides:
+// - blocks font requests
+// - overrides User-Agent (and prunes Sec-CH-UA* hints)
+class PerSiteOverridesThrottle : public content::URLLoaderThrottle {
+ public:
+  explicit PerSiteOverridesThrottle(PerSiteOverridesService* service);
+  ~PerSiteOverridesThrottle() override;
+
+  PerSiteOverridesThrottle(const PerSiteOverridesThrottle&) = delete;
+  PerSiteOverridesThrottle& operator=(const PerSiteOverridesThrottle&) = delete;
+
+  // content::URLLoaderThrottle:
+  void WillStartRequest(network::ResourceRequest* request,
+                        bool* defer) override;
+  void WillRedirectRequest(net::RedirectInfo* redirect_info,
+                           const network::mojom::URLResponseHead& response_head,
+                           bool* defer,
+                           std::vector<std::string>* to_be_removed_headers,
+                           net::HttpRequestHeaders* modified_headers,
+                           net::HttpRequestHeaders* modified_cors_exempt_headers) override;
+
+ private:
+  void MaybeApplyForRequest(network::ResourceRequest* request,
+                            net::HttpRequestHeaders* extra_headers,
+                            bool* cancel_request);
+
+  static std::string TopFrameHostFromRequest(
+      const network::ResourceRequest& request);
+
+  raw_ptr<PerSiteOverridesService> service_;  // Not owned; lives per-profile.
+};
+

diff --git a/chrome/browser/per_site_overrides/per_site_overrides_service.h b/chrome/browser/per_site_overrides/per_site_overrides_service.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/per_site_overrides/per_site_overrides_service.h
@@ -0,0 +104 @@
+#pragma once
+
+#include <string>
+#include <vector>
+
+#include "base/containers/flat_map.h"
+#include "base/memory/raw_ptr.h"
+#include "base/values.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "components/prefs/pref_change_registrar.h"
+#include "components/prefs/pref_registry_simple.h"
+#include "components/prefs/pref_service.h"
+
+class Profile;
+
+class PerSiteOverridesService : public KeyedService {
+ public:
+  struct Rule {
+    std::string ua;
+    bool block_fonts = false;
+  };
+
+  static constexpr char kPrefName[] = "per_site_overrides";
+
+  explicit PerSiteOverridesService(Profile* profile);
+  ~PerSiteOverridesService() override;
+
+  PerSiteOverridesService(const PerSiteOverridesService&) = delete;
+  PerSiteOverridesService& operator=(const PerSiteOverridesService&) = delete;
+
+  static void RegisterProfilePrefs(PrefRegistrySimple* registry);
+
+  bool FindRuleForHost(const std::string& top_frame_host, Rule* out) const;
+
+ private:
+  void OnPrefChanged();
+  void RebuildCacheFromPrefs();
+
+  base::flat_map<std::string, Rule> rules_;
+
+  raw_ptr<Profile> profile_ = nullptr;
+  raw_ptr<PrefService> prefs_ = nullptr;
+  PrefChangeRegistrar pref_registrar_;
+};
+

diff --git a/chrome/browser/per_site_overrides/per_site_overrides_service_factory.h b/chrome/browser/per_site_overrides/per_site_overrides_service_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/per_site_overrides/per_site_overrides_service_factory.h
@@ -0,0 +42 @@
+#pragma once
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+
+class Profile;
+class PerSiteOverridesService;
+
+class PerSiteOverridesServiceFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+  static PerSiteOverridesService* GetForProfile(Profile* profile);
+  static PerSiteOverridesServiceFactory* GetInstance();
+
+  PerSiteOverridesServiceFactory(const PerSiteOverridesServiceFactory&) = delete;
+  PerSiteOverridesServiceFactory& operator=(const PerSiteOverridesServiceFactory&) = delete;
+
+ private:
+  friend class base::NoDestructor<PerSiteOverridesServiceFactory>;
+
+  PerSiteOverridesServiceFactory();
+  ~PerSiteOverridesServiceFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  std::unique_ptr<KeyedService> BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  void RegisterProfilePrefs(PrefRegistrySimple* registry) override;
+  bool ServiceIsCreatedWithBrowserContext() const override { return true; }
+};
+

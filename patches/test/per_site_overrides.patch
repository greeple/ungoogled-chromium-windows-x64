diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index 03bec8f..cd70e32 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -108,6 +108,8 @@
 #include "chrome/browser/net/chrome_network_delegate.h"
 #include "chrome/browser/net/profile_network_context_service.h"
 #include "chrome/browser/net/profile_network_context_service_factory.h"
+#include "chrome/browser/net/per_site_overrides_throttle.h"
+#include "chrome/browser/per_site_overrides/per_site_overrides_service_factory.h"
 #include "chrome/browser/net/system_network_context_manager.h"
 #include "chrome/browser/optimization_guide/chrome_browser_main_extra_parts_optimization_guide.h"
 #include "chrome/browser/payments/payment_request_display_manager_factory.h"
@@ -5874,7 +5876,11 @@ ChromeContentBrowserClient::CreateURLLoaderThrottles(
   if (signin_throttle) {
     result.push_back(std::move(signin_throttle));
   }
-
+  // Per-site UA/font overrides throttle (profile-scoped).
+  if (profile) {
+    auto* svc = PerSiteOverridesServiceFactory::GetForProfile(profile);
+    result.push_back(std::make_unique<PerSiteOverridesThrottle>(svc));
+  }
   return result;
 }
diff --git a/chrome/browser/net/per_site_overrides_throttle.h b/chrome/browser/net/per_site_overrides_throttle.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/net/per_site_overrides_throttle.h
@@ -0,0 +1,88 @@
+#pragma once
+
+#include <string>
+#include <vector>
+
+#include "base/memory/raw_ptr.h"
+#include "content/public/browser/url_loader_throttle.h"
+#include "net/http/http_request_headers.h"
+#include "services/network/public/mojom/request_destination.mojom.h"
+#include "url/origin.h"
+
+class GURL;
+class PerSiteOverridesService;
+
+// A URLLoaderThrottle that applies per-top-frame-site overrides:
+// - blocks font requests
+// - overrides User-Agent (and prunes Sec-CH-UA* hints)
+class PerSiteOverridesThrottle : public content::URLLoaderThrottle {
+ public:
+  explicit PerSiteOverridesThrottle(PerSiteOverridesService* service);
+  ~PerSiteOverridesThrottle() override;
+
+  PerSiteOverridesThrottle(const PerSiteOverridesThrottle&) = delete;
+  PerSiteOverridesThrottle& operator=(const PerSiteOverridesThrottle&) = delete;
+
+  // content::URLLoaderThrottle:
+  void WillStartRequest(network::ResourceRequest* request,
+                        bool* defer) override;
+  void WillRedirectRequest(net::RedirectInfo* redirect_info,
+                           const network::mojom::URLResponseHead& response_head,
+                           bool* defer,
+                           std::vector<std::string>* to_be_removed_headers,
+                           net::HttpRequestHeaders* modified_headers,
+                           net::HttpRequestHeaders* modified_cors_exempt_headers) override;
+
+ private:
+  void MaybeApplyForRequest(network::ResourceRequest* request,
+                            net::HttpRequestHeaders* extra_headers,
+                            bool* cancel_request);
+
+  static std::string TopFrameHostFromRequest(
+      const network::ResourceRequest& request);
+
+  raw_ptr<PerSiteOverridesService> service_;  // Not owned; lives per-profile.
+};
+
diff --git a/chrome/browser/net/per_site_overrides_throttle.cc b/chrome/browser/net/per_site_overrides_throttle.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/net/per_site_overrides_throttle.cc
@@ -0,0 +163 @@
+#include "chrome/browser/net/per_site_overrides_throttle.h"
+
+#include "base/strings/string_util.h"
+#include "chrome/browser/per_site_overrides/per_site_overrides_service.h"
+#include "net/base/net_errors.h"
+#include "net/http/http_request_headers.h"
+#include "services/network/public/cpp/resource_request.h"
+#include "url/gurl.h"
+
+namespace {
+
+constexpr char kSecCHUA[] = "Sec-CH-UA";
+constexpr char kSecCHUAMobile[] = "Sec-CH-UA-Mobile";
+constexpr char kSecCHUAPlatform[] = "Sec-CH-UA-Platform";
+constexpr char kSecCHUAFullVersionList[] = "Sec-CH-UA-Full-Version-List";
+
+}  // namespace
+
+PerSiteOverridesThrottle::PerSiteOverridesThrottle(
+    PerSiteOverridesService* service)
+    : service_(service) {}
+
+PerSiteOverridesThrottle::~PerSiteOverridesThrottle() = default;
+
+void PerSiteOverridesThrottle::WillStartRequest(
+    network::ResourceRequest* request,
+    bool* defer) {
+  bool cancel = false;
+  net::HttpRequestHeaders extra;
+  MaybeApplyForRequest(request, &extra, &cancel);
+  if (cancel) {
+    delegate_->CancelWithError(net::ERR_BLOCKED_BY_CLIENT);
+    return;
+  }
+  if (!extra.IsEmpty()) {
+    delegate_->SetRequestHeaders(extra);
+  }
+}
+
+void PerSiteOverridesThrottle::WillRedirectRequest(
+    net::RedirectInfo* redirect_info,
+    const network::mojom::URLResponseHead& response_head,
+    bool* defer,
+    std::vector<std::string>* to_be_removed_headers,
+    net::HttpRequestHeaders* modified_headers,
+    net::HttpRequestHeaders* /*modified_cors_exempt_headers*/) {
+  if (!service_)
+    return;
+
+  const auto origin = delegate_->GetTopFrameOrigin();
+  const std::string top_frame_host = origin.GetURL().host();
+  PerSiteOverridesService::Rule rule;
+  if (!service_->FindRuleForHost(top_frame_host, &rule))
+    return;
+
+  if (!rule.ua.empty()) {
+    modified_headers->SetHeader(net::HttpRequestHeaders::kUserAgent, rule.ua);
+    to_be_removed_headers->push_back(kSecCHUA);
+    to_be_removed_headers->push_back(kSecCHUAMobile);
+    to_be_removed_headers->push_back(kSecCHUAPlatform);
+    to_be_removed_headers->push_back(kSecCHUAFullVersionList);
+  }
+}
+
+void PerSiteOverridesThrottle::MaybeApplyForRequest(
+    network::ResourceRequest* request,
+    net::HttpRequestHeaders* extra_headers,
+    bool* cancel_request) {
+  if (!service_)
+    return;
+
+  const std::string top_frame_host = TopFrameHostFromRequest(*request);
+  if (top_frame_host.empty())
+    return;
+
+  PerSiteOverridesService::Rule rule;
+  if (!service_->FindRuleForHost(top_frame_host, &rule))
+    return;
+
+  if (rule.block_fonts &&
+      request->destination == network::mojom::RequestDestination::kFont) {
+    *cancel_request = true;
+    return;
+  }
+
+  if (!rule.ua.empty()) {
+    extra_headers->SetHeader(net::HttpRequestHeaders::kUserAgent, rule.ua);
+    delegate_->RemoveRequestHeader(kSecCHUA);
+    delegate_->RemoveRequestHeader(kSecCHUAMobile);
+    delegate_->RemoveRequestHeader(kSecCHUAPlatform);
+    delegate_->RemoveRequestHeader(kSecCHUAFullVersionList);
+  }
+}
+
+std::string PerSiteOverridesThrottle::TopFrameHostFromRequest(
+    const network::ResourceRequest& request) {
+  if (request.trusted_params &&
+      request.trusted_params->isolation_info.top_frame_origin().has_value()) {
+    return request.trusted_params->isolation_info.top_frame_origin()
+        ->GetURL().host();
+  }
+  if (request.top_frame_origin.has_value())
+    return request.top_frame_origin->GetURL().host();
+
+  if (request.destination == network::mojom::RequestDestination::kDocument)
+    return request.url.host();
+  if (request.referrer.is_valid())
+    return GURL(request.referrer.spec()).host();
+  return std::string();
+}
+
diff --git a/chrome/browser/per_site_overrides/per_site_overrides_service.h b/chrome/browser/per_site_overrides/per_site_overrides_service.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/per_site_overrides/per_site_overrides_service.h
@@ -0,0 +104 @@
+#pragma once
+
+#include <string>
+#include <vector>
+
+#include "base/containers/flat_map.h"
+#include "base/memory/raw_ptr.h"
+#include "base/values.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "components/prefs/pref_change_registrar.h"
+#include "components/prefs/pref_registry_simple.h"
+#include "components/prefs/pref_service.h"
+
+class Profile;
+
+class PerSiteOverridesService : public KeyedService {
+ public:
+  struct Rule {
+    std::string ua;
+    bool block_fonts = false;
+  };
+
+  static constexpr char kPrefName[] = "per_site_overrides";
+
+  explicit PerSiteOverridesService(Profile* profile);
+  ~PerSiteOverridesService() override;
+
+  PerSiteOverridesService(const PerSiteOverridesService&) = delete;
+  PerSiteOverridesService& operator=(const PerSiteOverridesService&) = delete;
+
+  static void RegisterProfilePrefs(PrefRegistrySimple* registry);
+
+  bool FindRuleForHost(const std::string& top_frame_host, Rule* out) const;
+
+ private:
+  void OnPrefChanged();
+  void RebuildCacheFromPrefs();
+
+  base::flat_map<std::string, Rule> rules_;
+
+  raw_ptr<Profile> profile_ = nullptr;
+  raw_ptr<PrefService> prefs_ = nullptr;
+  PrefChangeRegistrar pref_registrar_;
+};
+
diff --git a/chrome/browser/per_site_overrides/per_site_overrides_service.cc b/chrome/browser/per_site_overrides/per_site_overrides_service.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/per_site_overrides/per_site_overrides_service.cc
@@ -0,0 +120 @@
+#include "chrome/browser/per_site_overrides/per_site_overrides_service.h"
+
+#include "base/strings/string_piece.h"
+#include "base/strings/string_util.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/prefs/scoped_user_pref_update.h"
+
+constexpr char kUAKey[] = "ua";
+constexpr char kBlockFontsKey[] = "block_fonts";
+
+// static
+void PerSiteOverridesService::RegisterProfilePrefs(
+    PrefRegistrySimple* registry) {
+  registry->RegisterDictionaryPref(kPrefName);
+}
+
+PerSiteOverridesService::PerSiteOverridesService(Profile* profile)
+    : profile_(profile), prefs_(profile->GetPrefs()) {
+  pref_registrar_.Init(prefs_);
+  pref_registrar_.Add(
+      kPrefName,
+      base::BindRepeating(&PerSiteOverridesService::OnPrefChanged,
+                          base::Unretained(this)));
+  RebuildCacheFromPrefs();
+}
+
+PerSiteOverridesService::~PerSiteOverridesService() = default;
+
+void PerSiteOverridesService::OnPrefChanged() {
+  RebuildCacheFromPrefs();
+}
+
+void PerSiteOverridesService::RebuildCacheFromPrefs() {
+  rules_.clear();
+  const base::Value::Dict& dict =
+      prefs_->GetDict(PerSiteOverridesService::kPrefName);
+  for (auto [pattern, value] : dict) {
+    const base::Value::Dict* entry = value.GetIfDict();
+    if (!entry)
+      continue;
+    Rule rule;
+    if (const std::string* ua = entry->FindString(kUAKey))
+      rule.ua = *ua;
+    if (const base::Value* bf = entry->Find(kBlockFontsKey))
+      rule.block_fonts = bf->is_bool() ? bf->GetBool() : false;
+    rules_.emplace(pattern, std::move(rule));
+  }
+}
+
+bool PerSiteOverridesService::FindRuleForHost(
+    const std::string& top_frame_host, Rule* out) const {
+  if (top_frame_host.empty())
+    return false;
+
+  auto it = rules_.find(top_frame_host);
+  if (it != rules_.end()) {
+    *out = it->second;
+    return true;
+  }
+  for (const auto& kv : rules_) {
+    const std::string& pat = kv.first;
+    if (!pat.empty() && pat[0] == '.') {
+      if (base::EndsWith(top_frame_host, pat,
+                         base::CompareCase::INSENSITIVE_ASCII)) {
+        *out = kv.second;
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
diff --git a/chrome/browser/per_site_overrides/per_site_overrides_service_factory.h b/chrome/browser/per_site_overrides/per_site_overrides_service_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/per_site_overrides/per_site_overrides_service_factory.h
@@ -0,0 +42 @@
+#pragma once
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+
+class Profile;
+class PerSiteOverridesService;
+
+class PerSiteOverridesServiceFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+  static PerSiteOverridesService* GetForProfile(Profile* profile);
+  static PerSiteOverridesServiceFactory* GetInstance();
+
+  PerSiteOverridesServiceFactory(const PerSiteOverridesServiceFactory&) = delete;
+  PerSiteOverridesServiceFactory& operator=(const PerSiteOverridesServiceFactory&) = delete;
+
+ private:
+  friend class base::NoDestructor<PerSiteOverridesServiceFactory>;
+
+  PerSiteOverridesServiceFactory();
+  ~PerSiteOverridesServiceFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  std::unique_ptr<KeyedService> BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  void RegisterProfilePrefs(PrefRegistrySimple* registry) override;
+  bool ServiceIsCreatedWithBrowserContext() const override { return true; }
+};
+
diff --git a/chrome/browser/per_site_overrides/per_site_overrides_service_factory.cc b/chrome/browser/per_site_overrides/per_site_overrides_service_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/per_site_overrides/per_site_overrides_service_factory.cc
@@ -0,0 +56 @@
+#include "chrome/browser/per_site_overrides/per_site_overrides_service_factory.h"
+
+#include "base/no_destructor.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/per_site_overrides/per_site_overrides_service.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+
+// static
+PerSiteOverridesService* PerSiteOverridesServiceFactory::GetForProfile(
+    Profile* profile) {
+  return static_cast<PerSiteOverridesService*>(
+      GetInstance()->GetServiceForBrowserContext(profile, true));
+}
+
+// static
+PerSiteOverridesServiceFactory* PerSiteOverridesServiceFactory::GetInstance() {
+  static base::NoDestructor<PerSiteOverridesServiceFactory> instance;
+  return instance.get();
+}
+
+PerSiteOverridesServiceFactory::PerSiteOverridesServiceFactory()
+    : BrowserContextKeyedServiceFactory(
+          "PerSiteOverridesService",
+          BrowserContextDependencyManager::GetInstance()) {}
+
+PerSiteOverridesServiceFactory::~PerSiteOverridesServiceFactory() = default;
+
+std::unique_ptr<KeyedService>
+PerSiteOverridesServiceFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return std::make_unique<PerSiteOverridesService>(
+      static_cast<Profile*>(context));
+}
+
+void PerSiteOverridesServiceFactory::RegisterProfilePrefs(
+    PrefRegistrySimple* registry) {
+  PerSiteOverridesService::RegisterProfilePrefs(registry);
+}
+
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 26b96e5..a8a110c 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -829,6 +829,12 @@ static_library("browser") {
     "net/profile_network_context_service.h",
     "net/profile_network_context_service_factory.cc",
     "net/profile_network_context_service_factory.h",
+    "net/per_site_overrides_throttle.cc",
+    "net/per_site_overrides_throttle.h",
+    "per_site_overrides/per_site_overrides_service.cc",
+    "per_site_overrides/per_site_overrides_service.h",
+    "per_site_overrides/per_site_overrides_service_factory.cc",
+    "per_site_overrides/per_site_overrides_service_factory.h",
     "net/proxy_config_monitor.cc",
     "net/proxy_config_monitor.h",
     "net/proxy_service_factory.cc",
